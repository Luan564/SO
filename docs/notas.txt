a.asm -> contendra instrucciones (Ser√°n los procesos que ejecute nuestro sistema operativo)

    instruccion 1
    instruccion 2
    ...
    instruccion n

   Ejemplos de instrucciones:
        MOV -> Asignaci√≥n
        ADD -> Suma
        SUB -> Resta
        MUL -> Multiplicaci√≥n
        DIV -> Divisi√≥n
        INC -> Incremento
        DEC -> Decremento

Asi se ver√° el archivo de instruccione que leera el programa:
    MOV Ax, 5       //Ax=5
    ADD Bx, 7       //Bx=Bx+7
    SUB Cx, 4       //Cx=Cx-4
    MUL Dx, 2       //Dx=Dx*4
    DIV Ax, 2       //Ax=Ax/2
    INC Bx          //Bx=Bx+1
    DEC Cx          //Cx=Cx-1





Interprete: Leera todo el comando por ejemplo "> ejecuta a.asm", "> salir"


Comprobar que se escribe la cadena "ejecuta" y posterior a ello analizar la segunda cadena "a.asm" por ejemplo
en caso de no existir se imprimira un mensaje de ERROR, pero en caso de si existir imprimir las operaciones que
se van realizando 

en terminar imprimir id, Ax, Bx, Cx, Dx, el valor de Pc y el valor de Ir.






#include<stdio.h>
#include<string.h>

int main(){
    char cadena[50]= "Esto es una prueba";
    char copia[50];
    char *delimitador=" ";
    char *token;
        strcpy(copia,cadena);
        //printf("Cadena original:\n",cadena);
        token = strtok(cadena,delimitador);
        //printf("Mi token %s\n",token);
        //printf("Cadena despues del strtok %s\n",cadena);

        while (token !=NULL){
            printf("Token: %s\n",token);
            token=strtok(NULL,delimitador);
        }
        
return 1;
}

principal.c 
    - controlador.c
        - interprete.c
            - comando.c                 //extraerComando, limpiarBuffer ‚úÖ‚úñÔ∏è
            - manejador_archivos.c      //leerArchivo ‚úñÔ∏è la mesma‚úñÔ∏è
            - instrucciones.c           //analizadorGpo1, analizadorGpo2, ‚úñÔ∏è
                - validar.c             //validarRegistro, tipoOperacion, esNumeroValido, obtenerRegistro ‚úñÔ∏è
                - alu.c                 //aluGpo1, aluGpo2 ‚úÖ



//Re-estructuraci√≥n

Para las estructuras crear un nuevo .h
1.- Crear estructura para los registros (Ax, Bx, Cx, Dx, PC, Ir, Proceso)
2.- Crear estructura para el buffer (ejecuta a.asm)         //‚úÖ
5.- Crear estructura para los estados   
6.- Crear estructura para las operaciones

Crear nuevos archivos .c: comando.c, manejador_archivos.c, instrucciones.c //??????
3.- Funcion interprete actualmente: Analiza el buffer, abre el archivo, ejecuta las instrucciones del archivo 
    Separar responsabilidades de Controlador[interprete.c {comando.c, manejador_archivos.c, instrucciones.c}]

4.- principal.c menor cantidad de lineas posibles
7.- Crear nuevo archivo para INICIALIZAR TODO üòâ