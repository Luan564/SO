funcion principal(){
    while(1){
        comando = entrada(entrada de consola);
        interprete(comando);
    }
}




funcion interprete(comando){
    token = primerToken(?);
    Si(token es "ejecutar"){
        token = segundoToken(?)     //a.asm
        leerArchivo(token)
    }
    si no(token es "salir"){
        exit();
    }
    si no{
        estructura.error = número de error tal; //Comando desconocido
        return 0;
    }


}

funcion leerArchivo(archivo){
    si(fopen(archivo) == NULL){
        estructura.error = número de error tal; //No existe el archivo
        return;
    }
    si no{ 
        mientras(fgets(linea,sizeof(linea),FILE archivo) != NULL){      //MOV Ax,7
            token = primerToken(?);
            Switch(token){
                case MOV:
                    tokenPt2 = segundoToken(?);     //Ax,7
                    ANALizadorGpo1(MOV,tokenPt2);
                    break;
                case ADD:
                    tokenPt2 = segundoToken(?);     //Ax,7
                    ANALizadorGpo1(ADD,tokenPt2);
                    break;
                case SUB:
                    tokenPt2 = segundoToken(?);     //Ax,7
                    ANALizadorGpo1(SUB,tokenPt2);
                    break;
                case DIV:
                    tokenPt2 = segundoToken(?);     //Ax,7
                    ANALizadorGpo1(DIV,tokenPt2);
                    break;
                case MUL:
                    tokenPt2 = segundoToken(?);     //Ax,7
                    ANALizadorGpo1(MUL,tokenPt2);
                    break;
                case INC:
                    tokenPt2 = segundoToken(?);     //Ax,7
                    ANALizadorGpo2(INC, tokenPt2);
                    break;
                case DEC:
                    tokenPt2 = segundoToken(?);     //Ax,7
                    ANALizadorGpo2(DEC, tokenPt2);
                    break;
                default:
                    estructura.error = número de error tal;     //ERROR operación inválida
                    break;
            }
        }
    }
}

//MOV, ADD, SUB, DIV, MUL
funcion ANALizadorGpo1(operacion, segundoToken){               //Ax,7
    registro = strtok(segundoToken, ",");          //Fx
    
    Switch(registro){
        case Ax;
            num = atoi(strok(tercerToken));
            alu(operacion, registro, num);
            break;
        case Bx;
            num = atoi(strok(tercerToken));
            alu(operacion, registro, num);
            break;
        case Cx;
            num = atoi(strok(tercerToken));
            alu(operacion, registro, num);
            break;
        case Dx;
            num = atoi(strok(tercerToken));
            alu(operacion, registro, num);
            break;
        default:
            estructura.error = número de error tal;     //ERROR registro Inválido o Delimitador erroneo
            return 0;
            break;
    }
}

//MOV, ADD, SUB, DIV, MUL
aluGpo1(operacion, registro, dato){
    Switch(operacion){
        case MOV:
            registro = dato;
            break;
        case ADD:
            registro = registro + dato;
            break;
        case SUB:
            registro = registro - dato;
            break;
        case DIV:
            registro = registro / dato;
            break;
        case MUL:
            registro = registro * dato;
            break;
    }
}



//INC, DEC
funcion ANALizadorGpo2(segundoToken){               //Ax
    registro = segundoToken          //Ax
    Switch(registro){
        case Ax;
            aluGpo2(operacion, registro);
            break;
        case Bx;
            aluGpo2(operacion, registro)
            break;
        case Cx;
            aluGpo2(operacion, registro)
            break;
        case Dx;
            aluGpo2(operacion, registro)
            break;
        default:
            estructura.error = número de error tal;     //ERROR registro Inválido o Delimitador erroneo
            break;
    }
}

//INC, DEC
aluGpo2(operacion, registro){
    Switch(operacion){
        case INC:
            registro = registro + 1;
            break;
        case DEC:
            registro = registro - 1;
            break;
    }
}